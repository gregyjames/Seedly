// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: ProgressStream.proto

package seedlyserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Seedly_GetUpdateStream_FullMethodName = "/main.Seedly/GetUpdateStream"
	Seedly_GetTorrentInfo_FullMethodName  = "/main.Seedly/GetTorrentInfo"
)

// SeedlyClient is the client API for Seedly service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeedlyClient interface {
	GetUpdateStream(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Seedly_GetUpdateStreamClient, error)
	GetTorrentInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
}

type seedlyClient struct {
	cc grpc.ClientConnInterface
}

func NewSeedlyClient(cc grpc.ClientConnInterface) SeedlyClient {
	return &seedlyClient{cc}
}

func (c *seedlyClient) GetUpdateStream(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Seedly_GetUpdateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Seedly_ServiceDesc.Streams[0], Seedly_GetUpdateStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &seedlyGetUpdateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Seedly_GetUpdateStreamClient interface {
	Recv() (*Update, error)
	grpc.ClientStream
}

type seedlyGetUpdateStreamClient struct {
	grpc.ClientStream
}

func (x *seedlyGetUpdateStreamClient) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *seedlyClient) GetTorrentInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, Seedly_GetTorrentInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeedlyServer is the server API for Seedly service.
// All implementations must embed UnimplementedSeedlyServer
// for forward compatibility
type SeedlyServer interface {
	GetUpdateStream(*DownloadRequest, Seedly_GetUpdateStreamServer) error
	GetTorrentInfo(context.Context, *InfoRequest) (*InfoResponse, error)
	mustEmbedUnimplementedSeedlyServer()
}

// UnimplementedSeedlyServer must be embedded to have forward compatible implementations.
type UnimplementedSeedlyServer struct {
}

func (UnimplementedSeedlyServer) GetUpdateStream(*DownloadRequest, Seedly_GetUpdateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUpdateStream not implemented")
}
func (UnimplementedSeedlyServer) GetTorrentInfo(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTorrentInfo not implemented")
}
func (UnimplementedSeedlyServer) mustEmbedUnimplementedSeedlyServer() {}

// UnsafeSeedlyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeedlyServer will
// result in compilation errors.
type UnsafeSeedlyServer interface {
	mustEmbedUnimplementedSeedlyServer()
}

func RegisterSeedlyServer(s grpc.ServiceRegistrar, srv SeedlyServer) {
	s.RegisterService(&Seedly_ServiceDesc, srv)
}

func _Seedly_GetUpdateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeedlyServer).GetUpdateStream(m, &seedlyGetUpdateStreamServer{stream})
}

type Seedly_GetUpdateStreamServer interface {
	Send(*Update) error
	grpc.ServerStream
}

type seedlyGetUpdateStreamServer struct {
	grpc.ServerStream
}

func (x *seedlyGetUpdateStreamServer) Send(m *Update) error {
	return x.ServerStream.SendMsg(m)
}

func _Seedly_GetTorrentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedlyServer).GetTorrentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seedly_GetTorrentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedlyServer).GetTorrentInfo(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Seedly_ServiceDesc is the grpc.ServiceDesc for Seedly service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Seedly_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Seedly",
	HandlerType: (*SeedlyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTorrentInfo",
			Handler:    _Seedly_GetTorrentInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUpdateStream",
			Handler:       _Seedly_GetUpdateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ProgressStream.proto",
}
